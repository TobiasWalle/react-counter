{"version":3,"sources":["components/NumberButton.tsx","components/NumberDisplay.tsx","components/Counter.tsx","registerServiceWorker.ts","index.tsx","components/App.tsx"],"names":["NumberButtonMode","NumberButton","props","valueChange","value","step","mode","_numberButtonModeConf","numberButtonModeConfiguration","update","symbol","react","onClick","_numberButtonModeConf2","Object","defineProperty","increment","decrement","NumberDisplay","Counter","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","setValue","setState","inherits","createClass","key","NumberButton_NumberButton","NumberDisplay_NumberDisplay","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","Counter_Counter","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9e78ab7e.chunk.js","sourcesContent":["import * as React from \"react\";\n\ninterface NumberButtonProps {\n  valueChange: (value: number) => void;\n  value: number;\n  step: number;\n  mode: NumberButtonMode;\n}\n\nexport const NumberButton: React.StatelessComponent<\n  NumberButtonProps\n> = props => {\n  const { valueChange, value, step, mode } = props;\n  const { update, symbol } = numberButtonModeConfiguration[mode];\n\n  return (\n    <button onClick={() => valueChange(update(value, step))}>\n      {symbol}\n      {step}\n    </button>\n  );\n};\n\nexport enum NumberButtonMode {\n  increment = \"increment\",\n  decrement = \"decrement\"\n}\n\nconst numberButtonModeConfiguration = {\n  [NumberButtonMode.increment]: {\n    update: (value: number, step: number) => value + step,\n    symbol: \"+\"\n  },\n  [NumberButtonMode.decrement]: {\n    update: (value: number, step: number) => value - step,\n    symbol: \"-\"\n  }\n};\n","import * as React from \"react\";\n\nexport interface NumberDisplayProps {\n  value: number;\n}\n\nexport const NumberDisplay: React.StatelessComponent<\n  NumberDisplayProps\n> = props => <span>{props.value}</span>;\n","import * as React from \"react\";\nimport { NumberButton, NumberButtonMode } from \"./NumberButton\";\nimport { NumberDisplay } from \"./NumberDisplay\";\n\ninterface CounterState {\n  value: number;\n}\n\nexport class Counter extends React.Component<{}, CounterState> {\n  state = {\n    value: 0\n  };\n\n  render() {\n    const { value } = this.state;\n\n    return (\n      <div>\n        <NumberButton\n          value={value}\n          valueChange={this.setValue}\n          mode={NumberButtonMode.decrement}\n          step={1}\n        />\n        <NumberDisplay value={value} />\n        <NumberButton\n          value={value}\n          valueChange={this.setValue}\n          mode={NumberButtonMode.increment}\n          step={1}\n        />\n      </div>\n    );\n  }\n\n  // This has to be an arrow function, so we don't have to bind 'this'\n  private setValue = (value: number) => this.setState({ value });\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n","import * as React from \"react\";\nimport { Counter } from \"./Counter\";\n\nexport const App: React.StatelessComponent<{}> = () => (\n  <div>\n    <h1>My Counter</h1>\n    <Counter />\n  </div>\n);\n"],"sourceRoot":""}